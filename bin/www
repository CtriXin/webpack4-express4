#!/usr/bin/env node

/**
 * Module dependencies.
 */

// 依赖加载
var app = require('../app');
var debug = require('debug')('musicash-web:server');
var http = require('http');


// 定义启动端口
var port = normalizePort(process.env.PORT || '5656');
app.set('port', port);


// 创建HTTP服务器实例
var server = http.createServer(app);

// 启动网络服务监听端口
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// 端口标准化函数
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

// HTTP异常事件处理函数
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

// 事件绑定函数
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}



//websocket
var io = require('socket.io')(server);
var users = {};
var userGroup = [];
//
// io.emit === io.socket.emit === 向服务器所有连接发送事件
// socket.emit == 向本链接发送事件
//
io.on('connection', function (socket) {
  //当有用户连接
  console.log('a user connected socketid is', socket.id);

  /*是否是新用户标识*/
  var isNewPerson = true;
  /*当前登录用户*/
  var username = null;

  console.log(userGroup);
  /*监听登录*/
  socket.on('add user', function (data) {
    for (var i = 0; i < userGroup.length; i++) {
      if (userGroup[i].username === data.userName) {
        isNewPerson = false
        break;
      } else {
        isNewPerson = true
      }
    }
    /*登录成功*/
    socket.emit('loginSuccess', data)

    if (isNewPerson) {
      username = data.userName
      userGroup.push({
        username: data.userName
      })
      console.log('loginSuccess');
      /*向所有连接的客户端广播add事件*/
      io.emit('username add', data.userName);
    } else {
      // /*登录失败*/
      // console.log('loginFail');
      // socket.emit('loginFail', '');

      console.log('用户又登录了');
      io.emit('loginAgain', data.userName);

    }
  })


  // socket.on('add user', function (data) {
  //   console.log(data.userName + ' just connected');
  //   //saving userId to array with socket ID
  //   users[socket.id] = data.userName;
  //   io.emit('username add', data.userName);
  // });
  // socket.on('disconnect', function () {
  //   //当有用户关闭
  //   console.log('user ' + users[socket.id] + ' disconnected');
  // });
  socket.on('post message', function (data) {
    //chat message方法在页面中定义
    console.log(data);
    //发布给所有用户
    io.emit('publish message', data);
  });

  socket.on('disconnect', function () {
    /*向所有连接的客户端广播leave事件*/
    io.sockets.emit('leave', username)
  })
});